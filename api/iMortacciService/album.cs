//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace iMortacci
{
    public partial class album
    {
        #region Primitive Properties
    
        public virtual int id
        {
            get;
            set;
        }
    
        public virtual string slug
        {
            get;
            set;
        }
    
        public virtual string title
        {
            get;
            set;
        }
    
        public virtual string description
        {
            get;
            set;
        }
    
        public virtual string alternate_desc
        {
            get;
            set;
        }
    
        public virtual System.DateTime created_at
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> release_at
        {
            get;
            set;
        }
    
        public virtual string artwork_url
        {
            get;
            set;
        }
    
        public virtual int status
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<track> tracks
        {
            get
            {
                if (_tracks == null)
                {
                    var newCollection = new FixupCollection<track>();
                    newCollection.CollectionChanged += Fixuptracks;
                    _tracks = newCollection;
                }
                return _tracks;
            }
            set
            {
                if (!ReferenceEquals(_tracks, value))
                {
                    var previousValue = _tracks as FixupCollection<track>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixuptracks;
                    }
                    _tracks = value;
                    var newValue = value as FixupCollection<track>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixuptracks;
                    }
                }
            }
        }
        private ICollection<track> _tracks;

        #endregion
        #region Association Fixup
    
        private void Fixuptracks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (track item in e.NewItems)
                {
                    item.album_id = id;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (track item in e.OldItems)
                {
                }
            }
        }

        #endregion
    }
}
